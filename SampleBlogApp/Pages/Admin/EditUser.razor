
@inject AdminServices AdminServices

@if (Roles != null && AllRoles != null)
{
    <h3>Current Roles:</h3>
    @foreach (var role in Roles)
    {
        <p>@role</p>
    }
    <h3>Add Role:</h3>
    <select @onchange="OnSelectChange">
        <option selected>-- PICK A ROLE --</option>
        @foreach (var role in AllRoles)
        {
            <option value="@role.Id">@role.Name</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="AddUserRole">Change</button>
}


@code {
    [Parameter]
    public UserDTO? User { get; set; }

    private List<string> Roles { get; set; }
    private List<RoleDTO> AllRoles { get; set; }
    private RoleDTO selectedRole { get; set; }

    private void OnSelectChange(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        var roledto = AllRoles.FirstOrDefault(x => x.Id == value);
        if (roledto != null)
        {
            selectedRole = roledto;
        }
    }

    private async Task AddUserRole()
    {
        if (selectedRole != null)
        {
            await AdminServices.AddUserToRoleAsync(User, selectedRole);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (User != null)
        {
            await SetNewUser(User);
        }
    }

    private async Task SetNewUser(UserDTO user)
    {
        var result = await AdminServices.GetUserRolesAsync(user);
        var rolesResult = await AdminServices.GetAllRolesAsync();
        User = user;


        if (result.Success)
        {
            Roles = result.Data;
        }
        else
        {
            throw new ApplicationException(result.Message);
        }
        if (rolesResult.Success)
        {
            AllRoles = rolesResult.Data;
        }
        else
        {
            throw new ApplicationException(rolesResult.Message);
        }
    }

    public async Task ChangeUser(UserDTO user)
    {
        await SetNewUser(user);

        StateHasChanged();
    }
}
